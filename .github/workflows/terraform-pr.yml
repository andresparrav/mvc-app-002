name: 'Terraform PR Validation'

on:
  pull_request:
    types: [opened, synchronize, reopened]  # ‚Üê SOLO en PRs activos, NO en closed
    branches: [ main ]  

permissions:
  id-token: write
  contents: read

jobs:
  terraform-validation:
    runs-on: ubuntu-latest
    # environment: development
    defaults:
      run:
        working-directory: ./terraform

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: |
          {
            "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
            "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
            "tenantId": "${{ secrets.AZURE_TENANT_ID }}",
            "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          }

    - name: Terraform Init
      run: terraform init

    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Plan
      id: plan
      run: |
        terraform plan -no-color -input=false
        echo "plan_exitcode=$?" >> $GITHUB_OUTPUT
      continue-on-error: true

    #- name: Update PR with Plan Result
    #  if: github.event.pull_request.state == 'open'  # ‚Üê SOLO si PR est√° ABIERTO
    #  uses: actions/github-script@v6
    #  with:
    #    script: |
    #      const output = `#### Terraform Plan Result üìã
    #      \`\`\`
    #      ${process.env.PLAN_STDOUT}
    #      \`\`\`
    #      *Pushered by: @${{ github.actor }}*`;
    #      
    #      github.rest.issues.createComment({
    #        issue_number: context.issue.number,
    #        owner: context.repo.owner,
    #        repo: context.repo.repo,
    #        body: output
    #      });
    #  env:
    #    PLAN_STDOUT: ${{ steps.plan.outputs.stdout }}