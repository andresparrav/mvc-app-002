name: 'Terraform Deploy to Azure'

on:
  # Se activa en MERGE de PRs
  pull_request:
    #types: [closed]
    branches: [ main ]

  # Se activa en push directo a main (backup)
  push:
    branches: [ main ]
    #paths:
    #  - 'terraform/**'

permissions:
  id-token: write
  contents: read

jobs:
  terraform-deploy:
    # Para PRs closed, solo ejecutar si fue MERGE
    if: |    
      github.event_name == 'push' ||
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true)

    # github.event.pull_request.merged == true
    
    runs-on: ubuntu-latest
    # environment: production
    defaults:
      run:
        working-directory: ./terraform

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Debug Directory Structure
      run: |
        echo "=== Estructura del repositorio ==="
        pwd
        ls -la
        echo "=== Buscando archivos de Terraform ==="
        find . -name "*.tf" -o -name "terraform" -type d

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: |
          {
            "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
            "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
            "tenantId": "${{ secrets.AZURE_TENANT_ID }}",
            "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          }

    - name: Terraform Init
      run: terraform init

    - name: Terraform Apply
      run: terraform apply -auto-approve

    - name: Debug Outputs
      run: |
        echo "=== Todas las outputs de este step ==="
        echo "üîµ Resource Group: ${{ steps.terraform-output.outputs.resource_group_name }}"
        echo "üîµ App Service: ${{ steps.terraform-output.outputs.app_service_name }}"

    

      # trabajo actual
    - name: Get Terraform Outputs
      id: terraform-output
      run: |
        echo "üìä === Obteniendo valores ==="
        
        echo "Workspace: ${{ github.workspace }}"
        cd ${{ github.workspace }}/terraform || exit 1

        echo "üíé Deshabilitar temporalmente los comandos de workflow"
        echo "::stop-commands::StopTerraformOutputs"
        
        echo "üíé Obtener outputs sin interferencia de GitHub"
        RESOURCE_GROUP=$(terraform output -raw resource_group_name)
        APP_SERVICE_NAME=$(terraform output -raw app_service_name)
        APP_URL=$(terraform output -raw app_url)
        
        echo "üíé Rehabilitar comandos de workflow"
        echo "::StartCommands::"
        
        echo "üíé Guardar en outputs del step"
        echo "app_service_name=$APP_SERVICE_NAME" >> $GITHUB_OUTPUT
        echo "resource_group_name=$RESOURCE_GROUP" >> $GITHUB_OUTPUT
        echo "app_url=$APP_URL" >> $GITHUB_OUTPUT
        
        echo "üîµ Valores guardados:"
        echo "Resource Group: $RESOURCE_GROUP"
        echo "App Service: $APP_SERVICE_NAME"
        echo "App URL: $APP_URL"
        
        working-directory: ${{ github.workspace }}/terraform

        echo "‚úîÔ∏è Valores obtenidos correctamente"


    - name: Deploy .NET Application # despliegue
      run: |
        echo "=== Verificando variables ==="
        echo "Resource Group: ${{ steps.terraform-output.outputs.resource_group_name }}"
        echo "App Service: ${{ steps.terraform-output.outputs.app_service_name }}"
        
        # Si las variables est√°n vac√≠as, fallar inmediatamente
        if [ -z "${{ steps.terraform-output.outputs.resource_group_name }}" ]; then
          echo "‚ùå ERROR: resource_group_name est√° vac√≠o"
          exit 1
        fi
        
        if [ -z "${{ steps.terraform-output.outputs.app_service_name }}" ]; then
          echo "‚ùå ERROR: app_service_name est√° vac√≠o"
          exit 1
        fi
        
        echo "üî® Desplegando aplicaci√≥n..."
        az webapp deploy \
          --resource-group "${{ steps.terraform-output.outputs.resource_group_name }}" \
          --name "${{ steps.terraform-output.outputs.app_service_name }}" \
          --src-path ./publish \
          --type zip